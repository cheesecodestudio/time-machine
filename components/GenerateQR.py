
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import *
from tkinter import filedialog as fd
from tkinter.messagebox import showinfo, showwarning

from utils.utils import GenerateId, RelativePath, SaveImageFiles, SaveAudioFile
from utils.textToSpeach import TextToSpeach
from utils.QRCpde import CreateQRCode

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"..\\assets\\GenerateQR")

images_paths = []
audio_path = ""

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# Commands ===============================================#
def selectImages(canvas, text_list_imgs):
    global images_paths
    filetypes = (
        ('PNG', '*.png'),
        ('JPG', '*.jpg'),
        ('JPEG', '*.jpeg')
    )

    images_paths = fd.askopenfilenames(
        title='Select images',
        initialdir='/',
        filetypes=filetypes)
    
    canvas.itemconfig(text_list_imgs, text="\n".join([img_path.split("/").pop() for img_path in images_paths]))

def select_audio(canvas, text_audio):
    global audio_path
    filetypes = (
        ('WAV', '*.wav'),
        ('Todos los archivos', '*.*')
    )

    audio_path = fd.askopenfilename(
        title='Select audio',
        initialdir='/',
        filetypes=filetypes)
    
    canvas.itemconfig(text_audio, text=audio_path.split("/").pop())

def generateInfo(text_to_speech):
    nameFile = GenerateId()
    if len(audio_path) > 0:
        # First split take a filename with extension, second split remove the extension
        nameFile = audio_path.split("/").pop().split(".")[0]

    if not SaveImageFiles(images_paths, RelativePath(f"output\\packImgs\\{nameFile}\\")):
        showwarning("Seleccionar imagenes", "Falta seleccionar imagenes para completar este proceso.")
        return
        
    # Debe ser de extension .wav
    relativePath = RelativePath(f"output\\audios\\{nameFile}.wav")
    
    if len(audio_path) > 0 and not SaveAudioFile(audio_path, RelativePath(f"output\\audios\\")):
        showwarning("Seleccionar audio", "Falta seleccionar imagenes para completar este proceso.")
        return
    elif len(audio_path) == 0 and not TextToSpeach(text_to_speech.get(1.0, END), relativePath):
        showwarning("Ingresar texto", "Falta ingresar un texto para completar este proceso.")
        return

    CreateQRCode(str(nameFile))
    showinfo("Información", "En la carpeta Descargas se creó el QR Code para que lo puedas utilizar.")

def generateQRCode(window, width = 500, height = 700):
    qrWindow = Toplevel()
    qrWindow.title("Create QR Code")
    qrWindow.geometry(f"{width}x{height}")  # Asignamos la dimension de la ventana
    qrWindow.transient(window)
    # Mantener el foco en la ventana toplevel
    qrWindow.focus()
    # Evitar que la ventana toplevel se mueva detrás de la ventana principal
    qrWindow.grab_set()
    
    canvas = Canvas(
        qrWindow,
        bg = "#FFFFFF",
        height = height,
        width = width,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    canvas.place(x = 0, y = 0)
# Select Images ========================================= BEGIN ===#
    image_rect_imgs = PhotoImage(
        file=relative_to_assets("rect_imgs.png"))
    canvas.create_image(
        250.0,
        63.0,
        image=image_rect_imgs
    )
    text_list_imgs = canvas.create_text(
        37.0,
        18.0,
        anchor="nw",
        text="",
        fill="#1E1E1E"
    )
    button_select_imgs_image = PhotoImage(
        file=relative_to_assets("select_imgs.png"))
    button_select_imgs = Button(
        qrWindow,
        image=button_select_imgs_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: selectImages(canvas, text_list_imgs),
        relief="flat"
    )
    button_select_imgs.place(
        x=25.0,
        y=108.0,
        width=200.0,
        height=35.0
    )
# Select Images ========================================== END ===#

# Select Audio ========================================= BEGIN ===#
    rect_audio_img_image = PhotoImage(
        file=relative_to_assets("rect_audio_img.png"))
    canvas.create_image(
        172.0,
        175.5,
        image=rect_audio_img_image
    )
    
    text_audio_select = canvas.create_text(
        37.0,
        172.0,
        anchor="nw",
        text="",
        fill="#1E1E1E"
    )

    button_select_audio_image = PhotoImage(
        file=relative_to_assets("select_audio.png"))
    button_select_audio = Button(
        qrWindow,
        image=button_select_audio_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: select_audio(canvas, text_audio_select),
        relief="flat"
    )
    button_select_audio.place(
        x=319.0,
        y=158.0,
        width=156.0,
        height=35.0
    )
# Select Audio ========================================== END ===#

# Text to Speech and GEN QR =========================== BEGIN ===#
    rect_text_speech_image = PhotoImage(
        file=relative_to_assets("rect_text_speech.png"))
    canvas.create_image(
        250.0,
        423.0,
        image=rect_text_speech_image
    )
    text_to_speech = Text(
        qrWindow,
        bd=0,
        bg="#A9C0C8",
        fg="#000716",
        highlightthickness=0
    )
    text_to_speech.place(
        x=33.0,
        y=208.0,
        width=434.0,
        height=428.0
    )

    button_generate_qr_image = PhotoImage(
        file=relative_to_assets("generate_qr.png"))
    button_generate_qr = Button(
        qrWindow,
        image=button_generate_qr_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: generateInfo(text_to_speech),
        relief="flat"
    )
    button_generate_qr.place(
        x=25.0,
        y=648.0,
        width=200.0,
        height=35.0
    )
# Text to Speech and GEN QR =========================== END ===#

    qrWindow.resizable(False, False)
    qrWindow.bind('<Escape>', lambda e: window.destroy())
    qrWindow.mainloop()
